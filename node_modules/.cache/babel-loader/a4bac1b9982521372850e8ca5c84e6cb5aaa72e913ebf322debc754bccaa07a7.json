{"ast":null,"code":"import { mapState, mapMutations } from 'vuex';\nimport { player } from '../player';\nexport default {\n  data() {\n    return {\n      stopMatrix: ''\n    };\n  },\n  computed: {\n    ...mapState(['isPlaying', 'coverUrl'])\n  },\n  watch: {\n    isPlaying(val) {\n      if (!val) {\n        this.stopMatrix = window.getComputedStyle(this.$refs.cover).transform;\n      } else {\n        const matrix = this.stopMatrix;\n        this.stopMatrix = '';\n        const match = matrix.match(/^matrix\\(([^,]+),([^,]+)/);\n        const [, sin, cos] = match || [0, 0, 0];\n        const deg = Math.atan2(cos, sin) / 2 / Math.PI * 360 % 360;\n        const styles = [...document.styleSheets];\n        styles.forEach(style => {\n          const rules = [...style.cssRules];\n          rules.forEach(rule => {\n            if (rule.type === rule.KEYFRAMES_RULE && rule.name === 'rotate') {\n              rule.cssRules[0].style.transform = `rotate(${deg}deg)`;\n              rule.cssRules[1].style.transform = `rotate(${deg + 360}deg)`;\n            }\n          });\n        });\n      }\n    }\n  },\n  methods: {\n    ...mapMutations(['togglePlay', 'changeCover']),\n    async handleChange() {\n      const target = this.$refs.file;\n      const files = target.files ? target.files : [];\n      if (files.length) {\n        for (let i = 0; i < files.length; i++) {\n          await player.append(files[i]);\n        }\n      }\n      target.value = '';\n    }\n  },\n  mounted() {\n    player.onReady.listen(() => {\n      this.changeCover();\n    });\n    player.onChange.listen(() => {\n      this.changeCover();\n    });\n    player.onPlay.listen(() => {\n      this.togglePlay(true);\n    });\n    player.onPause.listen(() => {\n      this.togglePlay(false);\n    });\n  }\n};","map":{"version":3,"names":["mapState","mapMutations","player","data","stopMatrix","computed","watch","isPlaying","val","window","getComputedStyle","$refs","cover","transform","matrix","match","sin","cos","deg","Math","atan2","PI","styles","document","styleSheets","forEach","style","rules","cssRules","rule","type","KEYFRAMES_RULE","name","methods","handleChange","target","file","files","length","i","append","value","mounted","onReady","listen","changeCover","onChange","onPlay","togglePlay","onPause"],"sources":["src/components/Disk.vue"],"sourcesContent":["<template>\n\t<div class=\"disk\" :class=\"{ disk_playing: isPlaying}\">\n\t\t<label class=\"disk_cover\" \n\t\tref=\"cover\" \n\t\tfor=\"file\" \n\t\t:style=\"{ \n\t\t\ttransform: stopMatrix, \n\t\t\tbackgroundImage: coverUrl ? 'url(' + coverUrl + ')' : ''\n\t\t\t}\" \n\t\t/>\n\t\t<!-- <input \n\t\tid=\"file\" \n\t\tref=\"file\" \n\t\ttype=\"file\" \n\t\taccept=\".mp3\" \n\t\tmultiple \n\t\t@change=\"handleChange\"\n\t\t/> -->\n\t</div>\n</template>\n\n<script>\n\timport { mapState, mapMutations } from 'vuex'\n\timport { player } from '../player'\n\texport default {\n\t  data () {\n\t    return {\n\t      stopMatrix: ''\n\t    }\n\t  },\n\t  computed: {\n\t    ...mapState(['isPlaying', 'coverUrl'])\n\t  },\n\t  watch: {\n\t    isPlaying (val) {\n\t      if (!val) {\n\t        this.stopMatrix = window.getComputedStyle(this.$refs.cover).transform\n\t      } else {\n\t        const matrix = this.stopMatrix\n\t        this.stopMatrix = ''\n\t\n\t        const match = matrix.match(/^matrix\\(([^,]+),([^,]+)/)\n\t        const [, sin, cos] = match || [0, 0, 0]\n\t        const deg = ((Math.atan2(cos, sin) / 2 / Math.PI) * 360) % 360\n\t\n\t        const styles = [...document.styleSheets]\n\t        styles.forEach(style => {\n\t          const rules = [...style.cssRules]\n\t          rules.forEach(rule => {\n\t            if (rule.type === rule.KEYFRAMES_RULE && rule.name === 'rotate') {\n\t              rule.cssRules[0].style.transform = `rotate(${deg}deg)`\n\t              rule.cssRules[1].style.transform = `rotate(${deg + 360}deg)`\n\t            }\n\t          })\n\t        })\n\t      }\n\t    }\n\t  },\n\t  methods: {\n\t    ...mapMutations(['togglePlay', 'changeCover']),\n\t    async handleChange () {\n\t      const target = this.$refs.file\n\t      const files = target.files ? target.files : []\n\t\n\t      if (files.length) {\n\t        for (let i = 0; i < files.length; i++) {\n\t          await player.append(files[i])\n\t        }\n\t      }\n\t      target.value = ''\n\t    }\n\t  },\n\t  mounted () {\n\t    player.onReady.listen(() => {\n\t      this.changeCover()\n\t    })\n\t    player.onChange.listen(() => {\n\t      this.changeCover()\n\t    })\n\t    player.onPlay.listen(() => {\n\t      this.togglePlay(true)\n\t    })\n\t    player.onPause.listen(() => {\n\t      this.togglePlay(false)\n\t    })\n\t  }\n\t}\n</script> \n\n<style lang=\"scss\">\n\t.disk{\n\t\tposition: relative;\n\t\tpadding-top: 100%;\n\t\tborder-radius: 100%;\n\t\toverflow: hidden;\n\t\ttransform: translateY(-50%) scale(0.88);\n\t\ttransform-origin: center bottom;\n\t\ttransition: all 0.6s ease;\n\t}\n\t.disk input{\n\t\tdisplay: none;\n\t}\n\t.disk_cover{\n\t\tposition: absolute;\n\t\ttop: -10px;\n\t\tleft: -10px;\n\t\tright: -10px;\n\t\tbottom: -10px;\n\t\tbackground-image: radial-gradient(circle, #444 0%, #333 100%);\n\t\tbackground-size: cover;\n\t\tbackground-position: center;\n\t}\n\t.disk_cover::after{\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\tmargin-left: -8px;\n\t\tmargin-top: -8px;\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\tborder-radius: 100%;\n\t\tbackground-image: linear-gradient(45deg, white, #dabad1);\n\t\tbox-shadow: 0 1px 1px 1px rgba(0, 0, 0, 0.2);\n\t}\n\t.disk__playing {\n\t    transform: translateY(-50%);\n\t    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1),\n\t\t  0 20px 20px -10px rgba(108, 29, 171, 0.3);\n\t}\n\t.disk__playing .disk_cover {\n\t    animation: rotate infinite 6s linear;\n\t}\n\t@keyframes rotate {\n\t    from {\n\t\t  transform: rotate(0);\n\t    }\n\t    to {\n\t\t  transform: rotate(360deg);\n\t    }\n\t}\n</style>"],"mappings":"AAsBA,SAAAA,QAAA,EAAAC,YAAA;AACA,SAAAC,MAAA;AACA;EACAC,KAAA;IACA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAL,QAAA;EACA;EACAM,KAAA;IACAC,UAAAC,GAAA;MACA,KAAAA,GAAA;QACA,KAAAJ,UAAA,GAAAK,MAAA,CAAAC,gBAAA,MAAAC,KAAA,CAAAC,KAAA,EAAAC,SAAA;MACA;QACA,MAAAC,MAAA,QAAAV,UAAA;QACA,KAAAA,UAAA;QAEA,MAAAW,KAAA,GAAAD,MAAA,CAAAC,KAAA;QACA,SAAAC,GAAA,EAAAC,GAAA,IAAAF,KAAA;QACA,MAAAG,GAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,GAAA,EAAAD,GAAA,QAAAG,IAAA,CAAAE,EAAA;QAEA,MAAAC,MAAA,OAAAC,QAAA,CAAAC,WAAA;QACAF,MAAA,CAAAG,OAAA,CAAAC,KAAA;UACA,MAAAC,KAAA,OAAAD,KAAA,CAAAE,QAAA;UACAD,KAAA,CAAAF,OAAA,CAAAI,IAAA;YACA,IAAAA,IAAA,CAAAC,IAAA,KAAAD,IAAA,CAAAE,cAAA,IAAAF,IAAA,CAAAG,IAAA;cACAH,IAAA,CAAAD,QAAA,IAAAF,KAAA,CAAAb,SAAA,aAAAK,GAAA;cACAW,IAAA,CAAAD,QAAA,IAAAF,KAAA,CAAAb,SAAA,aAAAK,GAAA;YACA;UACA;QACA;MACA;IACA;EACA;EACAe,OAAA;IACA,GAAAhC,YAAA;IACA,MAAAiC,aAAA;MACA,MAAAC,MAAA,QAAAxB,KAAA,CAAAyB,IAAA;MACA,MAAAC,KAAA,GAAAF,MAAA,CAAAE,KAAA,GAAAF,MAAA,CAAAE,KAAA;MAEA,IAAAA,KAAA,CAAAC,MAAA;QACA,SAAAC,CAAA,MAAAA,CAAA,GAAAF,KAAA,CAAAC,MAAA,EAAAC,CAAA;UACA,MAAArC,MAAA,CAAAsC,MAAA,CAAAH,KAAA,CAAAE,CAAA;QACA;MACA;MACAJ,MAAA,CAAAM,KAAA;IACA;EACA;EACAC,QAAA;IACAxC,MAAA,CAAAyC,OAAA,CAAAC,MAAA;MACA,KAAAC,WAAA;IACA;IACA3C,MAAA,CAAA4C,QAAA,CAAAF,MAAA;MACA,KAAAC,WAAA;IACA;IACA3C,MAAA,CAAA6C,MAAA,CAAAH,MAAA;MACA,KAAAI,UAAA;IACA;IACA9C,MAAA,CAAA+C,OAAA,CAAAL,MAAA;MACA,KAAAI,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}